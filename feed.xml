<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>咀嚼之味</title>
    <description>咀嚼之味是我分享我对编程与生活的见解之地。我喜欢做一些安静的事，比如看书、看电影、听音乐、散步以及旅行。</description>
    <link>https://jerryzou.com/</link>
    <atom:link href="https://jerryzou.com/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Prompt 咒语编写指南</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;本文共 3,200 字，预计阅读时间 10 分钟。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;写在最前面&quot;&gt;写在最前面&lt;/h3&gt;

&lt;p&gt;如果你对 ChatGPT 有基本的了解，有过一些和 ChatGPT 的对话，但不太清楚如何更好地使用这个工具，那么这篇文章值得一读。如果你还不知道 ChatGPT 是什么，或者还没有尝试过和 ChatGPT 对话，建议先去尝试一下再回头看这篇文章。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;在自然语言处理这个领域，大众消费市场的语音助手们在很长的一段时间里都给人们一种“人工智障”的感觉。无论是 Siri 还是小爱同学，都只能针对特定的场景给出较好的响应，但只要超出那些场景，他们大多只会答非所问。&lt;/p&gt;

&lt;p&gt;随着 ChatGPT 等大语言模型的普及，Google 深度学习科学家弗朗索瓦·肖莱对此的评论是：“&lt;strong&gt;人工智能的第三次夏天到来了。&lt;/strong&gt;” ChatGPT 是有史以来用户数以最快速度过亿的一款应用。最近，我在各种社交媒体上总是能够被各种 AI 相关的新闻和消息轰炸。有人对 AI 的快速发展感到忧惧，有人对 ChatGPT 当前的推理和逻辑运算能力嗤之以鼻，有人在散播大量人类岗位即将被 AI 取代的恐慌，有人则嘲笑另一批人在对深度学习缺乏了解的情况下盲目焦虑。&lt;/p&gt;

&lt;p&gt;其中有一种观点我特别认同：AI 就是大脑的“外骨骼”，能够极大地强化、扩展你的大脑能力。目前还很难预知某个岗位是否会真正被 AI 彻底取代，但可以预知的是，懂得如何运用 AI 技术将是未来一段时间内最重要的能力。&lt;/p&gt;

&lt;p&gt;目前大众接触最多的 ChatGPT 使用的底层模型还是 GPT-3.5，它在推理和逻辑计算方面还显得非常稚嫩。但 ChatGPT 所表现出的对人类自然语言的理解能力是非常惊人的，他可以很好地理解语言中的情绪。许多人已经从这款工具上获得了工作效率的成倍提升。掌握这款工具最重要的部分就在于“如何写好 prompt”。&lt;/p&gt;

&lt;p&gt;Prompt 直译成中文是“提示”的意思。有人戏称写 Prompt 就像魔法师念咒语一样，不同 prompt 所引导出的回答效果差异非常巨大。目前互联网上能找到很多 Prompt 现成案例（比如 &lt;a href=&quot;https://github.com/f/awesome-chatgpt-prompts&quot;&gt;Awesome ChatGPT prompts&lt;/a&gt; 和 &lt;a href=&quot;https://newzone.top/chatgpt/&quot;&gt;ChatGPT Shortcut&lt;/a&gt;）。你可以直接拿别人写好的“咒语”来使用，很多效果确实不错。但从“如何写好 prompt”角度出发的内容就少得多了。&lt;/p&gt;

&lt;p&gt;目前我找到最好的学习资料是：&lt;a href=&quot;https://github.com/dair-ai/Prompt-Engineering-Guide&quot;&gt;https://github.com/dair-ai/Prompt-Engineering-Guide&lt;/a&gt;，非常推荐大家阅读！在本文中，我将从中整理出一些能快速理解的简单技术，帮助你们理解如何优化、迭代自己的“咒语”。&lt;/p&gt;

&lt;h2 id=&quot;一第一原则明确的意图&quot;&gt;一、第一原则：明确的意图&lt;/h2&gt;

&lt;p&gt;你需要&lt;strong&gt;明确地表达&lt;/strong&gt;你的意图和要求，尽可能具体、描述性、详细地描述所需的上下文、你期望的结果等。你的要求越明确，越有希望获得你想要的答案。&lt;/p&gt;

&lt;p&gt;糟糕的案例 ❌&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;写一首关于OpenAI的诗。&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;更好的案例 ✅&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;以莎士比亚的风格写一首短小的、鼓舞人心的诗，重点关注最近DALL-E产品推出（DALL-E是一种文本到图像的ML模型）的事情。&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;上面的例子明确提出了几点要求：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;以莎士比亚的风格&lt;/li&gt;
  &lt;li&gt;短小的、鼓舞人心的&lt;/li&gt;
  &lt;li&gt;跟 DALL-E 产品相关的&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于 ChatGPT 只掌握了 2021 年的知识，可能不知道 DALL-E 是什么，我们还在 prompt 里简单解释了 DALL-E，帮他理解模棱两可的概念。&lt;/p&gt;

&lt;h2 id=&quot;二理解-prompt-的主要构成&quot;&gt;二、理解 Prompt 的主要构成&lt;/h2&gt;

&lt;p&gt;Prompt 的主要构成有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Instruction 指令&lt;/strong&gt;：您想让模型执行的特定任务或指令&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Context 上下文&lt;/strong&gt;：可以涉及外部信息或附加上下文，可以引导模型产生更好的响应&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Input Data 输入数据&lt;/strong&gt;：我们感兴趣的输入或问题（以期望 ChatGPT 给出解答）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Output Indicator 输出提示&lt;/strong&gt;：表示希望 ChatGPT 以什么形式来输出结果&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;接下来用几个 Prompts 来加深理解：&lt;/p&gt;

&lt;p&gt;案例一&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我希望你能担任私人教练的角色。我会提供你一个想通过体育锻炼变得更健康的人的信息，而你的角色是根据他们现有的健康水平、目标和生活习惯，为这个人设计最佳的计划。你应该利用你对运动科学、营养建议的知识，来为他们创建一个适合他们的计划。我第一个要求是：“我需要帮助为想减肥的人设计一个锻炼计划。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;其中，&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;上下文&lt;/strong&gt;：我希望你能担任私人教练的角色。我会…，来为他们创建一个适合他们的计划。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;指令&lt;/strong&gt;：我第一个要求是：“我需要帮助为想减肥的人设计一个锻炼计划。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;案例二&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;翻译成英文：如今 ChatGPT 给人带来的最大的震撼在于，他看起来真的理解了我们的提问，无论怎样的问题，他总能围绕问题作出解答。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;指令&lt;/strong&gt;：翻译成英文：&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;上下文&lt;/strong&gt;：如今 ChatGPT 给人带来的最大的震撼在于，… 他总能围绕问题作出解答。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;案例三&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;为特定的亚马逊产品特征撰写亚马逊的标题、五点和搜索关键词。输出内容为英文。五点的每一点都要超过 20 个单词。&lt;/p&gt;

  &lt;p&gt;输出格式为：&lt;/p&gt;

  &lt;p&gt;标题：&lt;/p&gt;

  &lt;p&gt;搜索关键词：&lt;/p&gt;

  &lt;p&gt;五点：1. &lt;content&gt;; 2. &lt;content&gt;; 3. &lt;content&gt;; ...&lt;/content&gt;&lt;/content&gt;&lt;/content&gt;&lt;/p&gt;

  &lt;p&gt;该产品的特征是：”””&lt;/p&gt;

  &lt;p&gt;[品牌] 防切割手套，Level A6 防切割级别，透气，舒适性强，黑色，适用于仓库、货运、钓鱼、园艺、木工，从 XS 到 XXL 码齐全，适用于各种人群需求。&lt;/p&gt;

  &lt;p&gt;”””&lt;/p&gt;

&lt;/blockquote&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;指令&lt;/strong&gt;：为特定的亚马逊产品特征撰写亚马逊的标题、五点和搜索关键词。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;上下文&lt;/strong&gt;：输出内容为英文。五点的每一点都要超过 20 个单词。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;输出提示&lt;/strong&gt;：输出格式为：…&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;输入数据&lt;/strong&gt;： 该产品的特征是：””” [品牌] 防切割手套，… 适用于各种人群需求。”””&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;三一些-prompt-的优化迭代技术&quot;&gt;三、一些 Prompt 的优化迭代技术&lt;/h2&gt;

&lt;p&gt;使用以下的方法，不断地优化你的 prompt。&lt;/p&gt;

&lt;h3 id=&quot;1-框选你想表达的重点信息&quot;&gt;1). 框选你想表达的重点信息&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;###&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;&quot;&quot;&lt;/code&gt; 等符号框选重点信息。使用符号来断开不同类型的内容会显著提升 ChatGPT 对内容的理解能力。&lt;/p&gt;

&lt;p&gt;糟糕的案例 ❌&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;将下面的文本总结为最重要的要点的项目符号列表。&lt;/p&gt;

  &lt;p&gt;如今 ChatGPT 给人带来的最大的震撼在于，他看起来真的理解了我们的提问，无论怎样的问题，他总能围绕问题作出解答…………………&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;更好的案例 ✅&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;将下面的文本总结为最重要的要点的项目符号列表。&lt;/p&gt;

  &lt;p&gt;文本：”””&lt;/p&gt;

  &lt;p&gt;如今 ChatGPT 给人带来的最大的震撼在于，他看起来真的理解了我们的提问，无论怎样的问题，他总能围绕问题作出解答…………………&lt;/p&gt;

  &lt;p&gt;”””&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;2-指定结果的输出格式&quot;&gt;2). 指定结果的输出格式&lt;/h3&gt;

&lt;p&gt;当你期望 ChatGPT 的输出内容具有一定结构时，把你的期望表达出来。&lt;/p&gt;

&lt;p&gt;糟糕的案例 ❌&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;从下面的文本中提取所有的人名和他们的职业。&lt;/p&gt;

  &lt;p&gt;文本：”””&lt;/p&gt;

  &lt;p&gt;设计师小牛陪小王去小李家做客，小李的老婆厨师小丁做了一道红烧带鱼。小王说“非常好吃！”&lt;/p&gt;

  &lt;p&gt;”””&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;更好的案例 ✅&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;从下面的文本中提取所有的人名和他们的职业。&lt;/p&gt;

  &lt;p&gt;输出的格式：&lt;人名&gt;(&lt;职业&gt;)，&lt;人名&gt;(&lt;职业&gt;)，...&lt;/职业&gt;&lt;/人名&gt;&lt;/职业&gt;&lt;/人名&gt;&lt;/p&gt;

  &lt;p&gt;文本：”””&lt;/p&gt;

  &lt;p&gt;设计师小牛陪小王去小李家做客，小李的老婆厨师小丁做了一道红烧带鱼。小王说“非常好吃！”&lt;/p&gt;

  &lt;p&gt;”””&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;3-act-as-trick-确定-chatgpt-的立场&quot;&gt;3). “Act as” trick 确定 ChatGPT 的立场&lt;/h3&gt;

&lt;p&gt;针对一些问题，尤其是开放性问题。整个互联网可能存在上百甚至上千万中答案，为 ChatGPT 设定立场有助于它找到最符合自己人设（也最符合你需要的）一种答案。&lt;/p&gt;

&lt;p&gt;糟糕的案例 ❌&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;你如何看待婚姻？&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;更好的 ✅&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;请作为女权主义者，回答以下问题：”你如何看待婚姻？”&lt;/p&gt;

  &lt;p&gt;or&lt;/p&gt;

  &lt;p&gt;请作为大男子主义者，回答以下问题：”你如何看待婚姻？”&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;4-few-shot-教教他给-chatgpt-一些案例&quot;&gt;4). Few-shot 教教他，给 ChatGPT 一些案例&lt;/h3&gt;

&lt;p&gt;对于 ChatGPT 熟悉的任务，你可能不需要给他任何例子（Zero-shot）比如，你给他 10 条评价某一个商品的 Review，让 ChatGPT 判断多少条是积极的，多少条是消极的。他通常可以直接给你正确的结果。因为它本身对情绪的理解能力已经很强了。但如果您正在尝试让 ChatGPT 做一件他不熟悉的事情，那可能需要提供更多案例。&lt;/p&gt;

&lt;p&gt;ChatGPT 已经熟悉的任务，不需要案例。即 zero-shot ✅&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;请识别下列评论的态度是怎么样的？给他们的态度打个分，1-10分，1分最消极，10分最积极&lt;/p&gt;

  &lt;p&gt;评论：&lt;/p&gt;

  &lt;p&gt;太难吃了，再也不回来了。&lt;/p&gt;

  &lt;p&gt;环境很糟糕。&lt;/p&gt;

  &lt;p&gt;亚米亚米，会再来！&lt;/p&gt;

  &lt;p&gt;什么鬼玩意儿。&lt;/p&gt;

  &lt;p&gt;再见！&lt;/p&gt;

  &lt;p&gt;💥💥💥💥💥&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;糟糕的案例 ❌&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;请将以下文本归类到三个字母：X/Y/Z&lt;/p&gt;

  &lt;p&gt;文本：&lt;/p&gt;

  &lt;p&gt;太难吃了，再也不回来了。&lt;/p&gt;

  &lt;p&gt;环境很糟糕。&lt;/p&gt;

  &lt;p&gt;亚米亚米，会再来！&lt;/p&gt;

  &lt;p&gt;什么鬼玩意儿。&lt;/p&gt;

  &lt;p&gt;再见！&lt;/p&gt;

  &lt;p&gt;💥💥💥💥💥&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;在糟糕的案例中，我们并没有定义 X, Y, Z 这三类分别代表什么意思。ChatGPT 虽然会按它的逻辑做好一定的分类，但我们并不一定会满意它的分类结果。我们没有明确定义需求，甚至我们连我们自己需要的东西是什么都还没弄清楚。这时候你就得回到我们的“第一原则”：搞清楚你自己的明确意图是什么。&lt;/p&gt;

&lt;p&gt;更好的案例 ✅&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;案例：&lt;/p&gt;

  &lt;p&gt;这家饭店里有虫子，靠。// X&lt;/p&gt;

  &lt;p&gt;我好喜欢鱼香肉丝。// Y&lt;/p&gt;

  &lt;p&gt;这家店的餐具挺好看的，但是吃的东西一般。// Z&lt;/p&gt;

  &lt;p&gt;🤡🤡🤡🤡 // Z&lt;/p&gt;

  &lt;p&gt;好吧。// Z&lt;/p&gt;

  &lt;p&gt;请将以下文本归类到三个字母：X/Y/Z&lt;/p&gt;

  &lt;p&gt;文本：&lt;/p&gt;

  &lt;p&gt;太难吃了，再也不回来了。&lt;/p&gt;

  &lt;p&gt;环境很糟糕。&lt;/p&gt;

  &lt;p&gt;亚米亚米，会再来！&lt;/p&gt;

  &lt;p&gt;什么鬼玩意儿。&lt;/p&gt;

  &lt;p&gt;再见！&lt;/p&gt;

  &lt;p&gt;💥💥💥💥💥&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;在上面的例子中，我们虽然没有明说 X, Y, Z 是什么意思。但通过案例表达了，X 偏负面评价，Y 偏正面评价，Z 的情绪未明确显露。这个时候 ChatGPT 为我们做好的分类就很接近我们想要的结果了。&lt;/p&gt;

&lt;h3 id=&quot;5-减少模糊的表达明确提出你的需求&quot;&gt;5). 减少模糊的表达，明确提出你的需求&lt;/h3&gt;

&lt;p&gt;糟糕的案例 ❌&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;你总结的产品描述应该非常简练、只包含一些语句、别太多。&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;更好的 ✅&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;用 2-3 句话总结该产品，不超过 30 个字。&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;6-告诉他要做什么而不是不要做什么&quot;&gt;6). 告诉他要做什么，而不是不要做什么&lt;/h3&gt;

&lt;p&gt;糟糕的案例 ❌&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;以下是一名客服和一名客户之间的对话。请勿询问用户名或密码。请勿重复。&lt;/p&gt;

  &lt;p&gt;客户：我无法登录我的账户。&lt;/p&gt;

  &lt;p&gt;客服：&lt;/p&gt;

&lt;/blockquote&gt;

&lt;p&gt;更好的 ✅&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;以下是客服与顾客之间的对话。客服将尝试诊断问题并提出解决方案，同时避免问任何与用户名、密码相关的问题。请引导用户查看帮助文章 www.samplewebsite.com/help/faq。&lt;/p&gt;

  &lt;p&gt;顾客：我无法登录我的账户。&lt;/p&gt;

  &lt;p&gt;客服：&lt;/p&gt;

&lt;/blockquote&gt;

&lt;h3 id=&quot;7-step-by-step-trick帮助-chatgpt-做推理&quot;&gt;7). “Step by Step” trick，帮助 ChatGPT 做推理&lt;/h3&gt;

&lt;p&gt;也叫做：Chain-of-Thought Prompting。&lt;/p&gt;

&lt;p&gt;实验证明，在应对 zero-shot 问题时，你在问题最后加上“Let’s think step by step”，ChatGPT “显性的推理能力”会得到明显提升。这个就不多展开了，感兴趣的朋友可以看看这篇参考文章：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/527423190&quot;&gt;Prompt learning 系列之 Let’s think step by step&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;最后&quot;&gt;最后，&lt;/h2&gt;

&lt;p&gt;这篇文章的内容还是比较浅显。如果你因此对 Prompt 工程产生了一些兴趣，可以继续阅读 &lt;a href=&quot;https://github.com/dair-ai/Prompt-Engineering-Guide&quot;&gt;Prompt Engineering Guide&lt;/a&gt;，里面包含很多这篇内容没有囊括的有趣话题。比如对抗性提示、怎么解决对话机器人的前后一致性问题、如何改善 AI 输出错误信息或者有偏见信息的问题。其中对抗性提示（Adversarial Prompting）话题包含了如何做到对话机器人的越狱，如何让它说一些 AI 设计者不想让它说的话。&lt;/p&gt;

&lt;p&gt;我是一个普普通通的深度学习初学者，本文如有任何谬误，欢迎拍砖。&lt;/p&gt;
</description>
        <pubDate>Sat, 25 Mar 2023 07:15:00 +0000</pubDate>
        <link>https://jerryzou.com/posts/how-to-write-a-prompt-for-chatgpt/</link>
        <guid isPermaLink="true">https://jerryzou.com/posts/how-to-write-a-prompt-for-chatgpt/</guid>
      </item>
    
      <item>
        <title>完成不可能的任务——推荐《如何阅读一本书》</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;本文共 2,400 字，预计阅读时间 6 分钟。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;2022 年过去了，一年读了二十本书，但在豆瓣上“想读的书”不减反增。我发现阅读动力不足的原因是，在阅读了一段时间之后我仍然无法获知这本书与我有什么关系。于是最初的热情就很快消解掉了。&lt;/p&gt;

&lt;p&gt;我时常会带着一些明确的目的和想要解答的疑问去阅读。我自己称之为“功利的阅读”，然而读完一本书的结果反而是令我萌生出了更多的问题，发现了更多可能很精彩的好书。我的书单越来越长，甚至有时会让我横生出一些焦虑感。此时我便会搬出那句庄子的名言来安慰自己：“吾生也有涯，而知也无涯。以有涯随无涯，殆已！”&lt;/p&gt;

&lt;p&gt;有一天在我整理书单的时候，一本躺在“想读”列表里许久的工具书引起了我的注意——《如何阅读一本书》。在读这本书的过程中，我一直有种微妙的荒诞感——我正在通过阅读一本叫《如何阅读一本书》的书来学习如何阅读一本书。&lt;/p&gt;

&lt;p&gt;此书存在不少非议。很多人说，这本书臃肿啰嗦，就阅读这件人人都会的事，两位作者却为此洋洋洒洒写出了 26 万字的长文（中译本的字数）。但是看完这本书之后，它在我心目中仅次于《学会提问》，是世上第二好用的工具书。&lt;/p&gt;

&lt;p&gt;《如何阅读一本书》是阅读技巧的集大成者。然而我并不想在这篇文章中总结书中提到的技巧。只想聊聊书中一些令我醍醐灌顶的观点，如果能让你有兴趣翻开这本书的目录瞧瞧，那便会给我带来莫大的快乐。&lt;/p&gt;

&lt;h3 id=&quot;思维导图怪圈&quot;&gt;思维导图怪圈&lt;/h3&gt;

&lt;p&gt;首先，就是我所遇到的“思维导图怪圈”。你是否有这样的经历：无论你搜索什么知识，总有人梳理好一个巨大的思维导图放在文章的开头。这些需要放大 5 - 6 倍才能看清的巨幅图片里面充斥着各种总结性的短语。对我来说除了头疼就一无所获了。&lt;/p&gt;

&lt;p&gt;我一直很困惑，明明思维导图是这么好用的一个工具，我却总是没法从别人的思维导图中获得知识。为什么会造成这样一个现象呢？书中给出了解答：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;对一本书来说，血肉跟骨架是一样重要的。书，真的就跟人或动物是一模一样的。——血肉，就是为纲要所作的进一步详细解释，或是我们有时候所说的“解读”（read out）。血肉，为全书增添了必要的空间与深度。对动物来说，血肉就是增加了生命。……如果一千页的作品摘成九百页，这样的问题不大。如果一千页的文字浓缩成十页或甚至一页，那么到底留下来的是些什么东西就是个大问题了。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;因为思维导图剔除了血肉，只剩骨架，所以显得冰冷不堪。已经掌握这门知识的人可以快速通过思维导图这幅骨架检索到自己死去的回忆，因为血肉已经映在了制图人的脑海中，然而失去血肉的思维导图却无法引导后来者走向坦途。&lt;/p&gt;

&lt;h3 id=&quot;阅读的目的&quot;&gt;阅读的目的&lt;/h3&gt;

&lt;p&gt;第二个有意思的点是阅读的目的。我们究竟是为了什么而阅读？书中提到了三个主要阅读的目的：第一，为了获取资讯而阅读；第二，为了消遣娱乐而阅读；第三，为了提升理解力而阅读。这本书是为第三个目的而写，因为前两种阅读是不需要任何技巧支撑的。书中有个很典型的比喻：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;阅读就是跟一位缺席的老师学习……写作与阅读的东西就像那只球一样，是被主动、有活力的双方所共有的，是由一方开始，另一方终结的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“缺席的老师”、“抛接球”，这真是非常形象的比喻！作者强调了老师的缺席，因此你只能靠你自己，而且接球也是一个非常主动的行为，是故“阅读越主动，效果越好”。你会在阅读的过程中遇到很多困难，遇到你难以理解的片段，但你不能依赖任何其他人写的读后感和导读，只有靠你自己克服，你的理解力才能得到真正的提升。&lt;/p&gt;

&lt;h3 id=&quot;什么算读书读得好&quot;&gt;什么算“读书读得好”？&lt;/h3&gt;

&lt;p&gt;第三个令人欣慰的观点是，“要读得更好，永远更好，不过，有时候要读得慢一点，有时候要读得快一点。”&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;大多数人，即使是许多优秀的阅读者，都忽略了检视阅读的价值。他们打开一本书，从第一页开始读起，孜孜不倦，甚至连目录都不看一眼。因此，他们在只需要粗浅翻阅一本书的时候，却拿出了仔细阅读、理解一本书的时间。这就加重了阅读的困难。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;弗兰西斯·培根曾经说过：“有些书可以浅尝即止，有些书是要生吞活剥，只有少数的书是要咀嚼与消化的。”书中阐明了三种不同层次的阅读方法，分别是检视阅读、分析阅读和主题阅读。检视阅读的技巧，就是教会你在 1-2 个小时内大致摸清一本书在说些什么，然后再决定是否需要花精力仔细阅读。这是最初级的技巧，却是最重要的基础。&lt;/p&gt;

&lt;p&gt;书中花了很大的篇幅来介绍如何做精细的分析阅读，但这种方法实在是耗人精力。所以事实上，人的一生也许只能用分析阅读的方法来读为数不多的几本书。如此一来，我们可能需要大量运用检视阅读来排除不需要精读、细读的书。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;当我们说某人读书“读得很好”（Well-read）时，我们心中应该要有这些标准来作衡量的依据。太多时候，我们是用这样的句子来形容一个人阅读的量，而非阅读的质。一个读得很广泛，却读不精的人，与其值得赞美，不如值得同情。就像霍布斯所说：“如果我像一般人一样读那么多书，我就跟他们一样愚蠢了。”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;书单&quot;&gt;书单&lt;/h3&gt;

&lt;p&gt;最后，这本书提供了一个精选的书单。人是如何开始对一本书产生兴趣的？有时候是朋友推荐，有时候是在挖掘自己感兴趣的话题时搜索到了一些书，又或者是通过猜你喜欢、热销榜、评分榜上看到了有意思的书。人可以从一份好的书单中获益良多，既然阅读就是跟一位缺席的老师学习，那你最好保证这位老师的写作和知识水平足够高，牛逼的书单就可以帮你做到这一点。同时，书中所介绍的最高阶阅读方法——主题阅读，是极其依赖书单这件最重要的工具的。&lt;/p&gt;

&lt;h2 id=&quot;孤独的理想主义者&quot;&gt;孤独的理想主义者&lt;/h2&gt;

&lt;p&gt;作者莫提默·艾德勒和查尔斯·范多伦是两位充满理想主义的老师，而他们对于自己的“学生们”——读者们，又非常的严格。他们要求“学生们”必须在了解事情的全貌之后才能做评价。在他们看来，很多时候即便看完一本书，我们的评价只能是“我还不够了解”，而无法给出真正的评判。书里是这样说的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;同样的状况也发生在其他作者身上，像柏拉图、康德、亚当·斯密与马克思等人——这些人不可能在一本书中将自己所有的思想与知识全部写出来。而那些评论康德《纯粹理性批判》，却根本没看过他《实践理性批判》的人；批评亚当·斯密的《国富论》，却没看过他《道德情操论》（Theory of Moral Sentiments）的人；或是谈论《共产党宣言》，却没有看过马克思《资本论》的人，他们都是在赞成或反对一些自己并不了解的东西。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;人是懒惰的，也是傲慢的，很容易对自己并不了解的事情高谈阔论。两位作者却希望在这个不完美的世界中完成这样一件不可能的任务——教人怎样更好地阅读。要形容像他们这种努力用自己的绵薄之力来对抗这个荒诞世界的行为，现在有个还算时髦的词汇——孤勇者。&lt;/p&gt;
</description>
        <pubDate>Mon, 02 Jan 2023 07:20:00 +0000</pubDate>
        <link>https://jerryzou.com/posts/how-to-read-a-book-recommendation/</link>
        <guid isPermaLink="true">https://jerryzou.com/posts/how-to-read-a-book-recommendation/</guid>
      </item>
    
      <item>
        <title>从《有限与无限的游戏》谈起</title>
        <description>&lt;p&gt;唯一不变的是变化。人生总是伴随着各种不确定性，诸如互联网公司的裁员潮、上海面临疫情和社会治理的双重灾难。人，生来更偏好于秩序感，而排斥不确定性。在面对不确定性时，人就很容易陷入焦虑的情绪。&lt;/p&gt;

&lt;p&gt;对抗焦虑有不少做法。在疫情期间，我首先采取了阻断式疗法——删除微博。这种方式简单粗暴，且高效。其次就是在我的方寸之地内寻求有限的秩序感。对过去积累下来的文字、笔记做好梳理，打扫房间，整理桌面，这些都是既简单又能快速让我回归平静的小事。前者屏蔽了干扰，而后者转移了注意力。事实上两者都没有真正消除不确定性。平静的心，会随着新问题的暴露或老问题的重现而波动。如何让自己的内心面对狂风骤雨时，依旧保持澄澈，如何在面对苦痛与磨难时，仍旧维持心灵的防线呢？&lt;/p&gt;

&lt;p&gt;我尝试在书籍这座避难所中寻找答案。&lt;/p&gt;

&lt;h2 id=&quot;有限与无限的游戏&quot;&gt;有限与无限的游戏&lt;/h2&gt;

&lt;p&gt;《有限与无限的游戏》是一本光看名字就觉得很有意思的书，英文名是《Finite And Infinite Games》。而卡斯教授在他对这本书的自述中写道，他是受到博弈论（Game theory）启发而延展出了有限与无限游戏的理论。也许翻译成《有限与无限的博弈》更佳吧。&lt;/p&gt;

&lt;p&gt;“世上至少有两种游戏，一种是有限游戏，一种是无限游戏。”在卡斯的笔触下，绝大多数世上发生的事情都属于有限游戏，而有且仅有一种无限游戏。&lt;/p&gt;

&lt;p&gt;有限游戏以取胜为目的，而无限游戏以延续游戏为目的。一场球赛、一盘棋局，亦或是一场考试，都是典型的有限游戏。无论是有限游戏还是无限游戏，是否加入一场游戏是每一个游戏参与者的自由。如书中所述，甚至奴隶在面对奴役这场有限游戏时，他也是有自己的选择权的。他可以拒绝参与这场关于奴役的有限游戏，但代价很可能是生命。&lt;/p&gt;

&lt;p&gt;有限游戏具有规则的不变性，类似于契约。所有有限游戏的参与者对规则自愿认同并遵守。如果规则发生变化，那么这场有限游戏就不再是原来的游戏了，而是一场完全不同的游戏。而无限游戏具有规则的必变性，规则为了延续游戏而服务。因此我们可以说，有限游戏有明确的边界，而无限游戏没有边界。书中总结了这样一个案例：社会是有限游戏，文化是无限游戏。而王兴对此的理解是“有限游戏在边界内玩，无限游戏却是在和边界，也就是在和‘规则’玩，探索改变边界本身。”&lt;/p&gt;

&lt;p&gt;有限游戏是剧本化的。有限游戏的参与者讨厌惊奇（Surprise）。为了取胜，他必须通过预测来掌控每一个可能发生的意外。对有限游戏的大师级参与者来说，游戏的剧本早已写好，结局在第一幕已经确定。而无限游戏参与者对未知充满开放性，他们喜欢惊奇。&lt;/p&gt;

&lt;p&gt;两种不同的游戏视角，实际上铸就了两种不同的世界观。以我浅显的理解，无限游戏观包含三个内涵：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;正视死亡的必然性，但死亡不是游戏的终点，而是游戏过程中的瞬间。无限游戏参与者的生和死都是为了延续他人的生命。&lt;/li&gt;
  &lt;li&gt;永远对意外和惊喜抱有开放的心态，惊奇才能使无限游戏维持下去。&lt;/li&gt;
  &lt;li&gt;以更高的视域来看待边界，而其终极理想则是没有边界。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;心灵之盾&quot;&gt;心灵之盾&lt;/h2&gt;

&lt;p&gt;心灵之盾，意为人在主观精神世界里构建出来的防线，不受物质世界的变化为转移。这是我臆想出来的一个词汇。生活中的不确定性犹如随时会发起进攻的利剑，而心灵之盾则为人们维护精神世界的平衡。&lt;/p&gt;

&lt;p&gt;在如何面对不确定性这个问题上，无限游戏观是卡斯教授所传达的心灵之盾。&lt;/p&gt;

&lt;p&gt;心灵之盾和信仰一词的含义接近，它可以通过文字或者言传授教的方式传播。但它又不等同于信仰，也可以仅仅是处世为人的原则。&lt;/p&gt;

&lt;p&gt;心灵之盾有时可以被称为“狭隘的正义”。广义的正义如罗翔教授所说，是客观的。而此处所说的“狭隘的正义”，更接近曾经很火的日剧《胜利即正义》（Legal High）中所说正义。它是一种主观上认同的事情，是个人坚守的阵地。&lt;/p&gt;

&lt;p&gt;桥水基金的创始人瑞·达利欧花费数十年与他的家人、朋友、工作伙伴一起整理了上百条生活与工作的原则，这些原则是他的心灵之盾。瑞和卡斯“传教”的方式都是撰写书籍。宗教则是传播更为广泛的一种心灵之盾，往往都具有上百年的积淀。但我对宗教知之甚少，无法多谈。&lt;/p&gt;

&lt;p&gt;人的认知形成过程不是一瞬间的事情，知识的高塔亦非一夜建成。一条直觉性的捷径是站在先行者的肩膀上，依着他们的心灵之盾来仿制我们自己的心灵之盾。但即便接触到一些令人醍醐灌顶的思考，要真正化为己用仍需要数余年的实践。&lt;/p&gt;

&lt;p&gt;可以说，铸造心灵之盾的过程就是一场修行。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/33438841/&quot;&gt;有限与无限的游戏&lt;/a&gt;，James P. Carse&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jamescarse.com/books/finite-and-infinite-games/&quot;&gt;Finite And Infinite Games 英文自述&lt;/a&gt;，James P. Carse&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV1E741167P7&quot;&gt;正义是什么&lt;/a&gt;，罗翔&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 02 May 2022 15:00:00 +0000</pubDate>
        <link>https://jerryzou.com/posts/mind-shield/</link>
        <guid isPermaLink="true">https://jerryzou.com/posts/mind-shield/</guid>
      </item>
    
      <item>
        <title>推荐我 2020 年读过的十本书</title>
        <description>&lt;p&gt;不知道其他人怎么样，我在读书的过程中有时会迸发出一些小火花，将过去埋藏在深处的记忆激发出来。在书中一边寻找答案，一边激活记忆的碎片，这种感觉是非常有意思的。&lt;/p&gt;

&lt;p&gt;去年算是我读书相对以往较多的一年，这既说明了我在过去的一年有非常强烈的成长渴望，也说明了我遭遇了一些困难与瓶颈。非常感谢这些书在这过去的一年里带给我的力量，简单跟大家推荐一下我认可的好书！&lt;/p&gt;

&lt;h3 id=&quot;推荐书籍一数据密集型应用系统设计&quot;&gt;推荐书籍一：&lt;a href=&quot;https://book.douban.com/subject/30329536/&quot;&gt;数据密集型应用系统设计&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;猪书，简称 DDIA，这是一本我 5 星推荐的好书。虽然本书的第 12 章翻译奇差，但瑕不掩瑜，这是一本干货满满的好书。数据密集型应用系统，我相信 90% 的程序员们都很难有机会实操。如果你想要了解如何让自己所掌控的系统健壮而又（在大多数时候）稳定，它会是你最好的帮手之一。它解答了我多年编程生涯以来的各种疑问，推荐给所有 1 年以上工作经验的后端伙伴们。&lt;/p&gt;

&lt;h3 id=&quot;推荐书籍二管理学原理与实践&quot;&gt;推荐书籍二：&lt;a href=&quot;https://book.douban.com/subject/3393766/&quot;&gt;管理学：原理与实践&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;又是一本巨厚无比的书（虽然我是在 Kindle 上看的，但真的花了好久！）据说是很多管理学院的教材，因此对我这样的管理新兵来说非常适合。这本书给出了一个基本的框架，从计划、组织、领导和控制四个方面讲述了管理学的实践方法。虽然内容超长但非常通俗易懂，我可以给到 4.5 星。&lt;/p&gt;

&lt;h3 id=&quot;推荐书籍三杀死一只知更鸟&quot;&gt;推荐书籍三：&lt;a href=&quot;https://book.douban.com/subject/26879778/&quot;&gt;杀死一只知更鸟&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;这是一本小说，就不剧透了！4.5 星，希望自己未来能成为像阿迪克斯一样的父亲。&lt;/p&gt;

&lt;h3 id=&quot;推荐书籍四史蒂夫乔布斯传&quot;&gt;推荐书籍四：&lt;a href=&quot;https://book.douban.com/subject/6798611/&quot;&gt;史蒂夫·乔布斯传&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;非常有意思的一本书，5 星好评。为什么乔布斯能带领苹果、皮克斯走向成功？&lt;/p&gt;

&lt;p&gt;第一，他对自己的产品倾注了百分之一百的热情，不以挣钱为目的，而是做出令自己深信不疑的产品。这是马库拉教会给乔布斯的理念，并伴随了他的一生。&lt;/p&gt;

&lt;p&gt;第二，他永远在探求与最顶尖的人才合作的机会，他认为确保团队优秀是他的责任。没有他们，乔布斯永远达不到如今的成就，像沃兹、乔尼。&lt;/p&gt;

&lt;p&gt;第三，专注。化繁为简是一件极其难的事情，当你面前摆着许多诱惑和可能性时，很容易忘记什么才是真正重要的。但乔布斯做到了，他把“专注”的管理哲学带回了即将倒闭的苹果，并为它带来最辉煌的十年。&lt;/p&gt;

&lt;p&gt;第四，坦诚，也可以说是残酷的诚实，就像个混蛋。但不得不说，你很难既做一个友好的人，又成为一个优秀的管理者。在面对糟糕的状况时，你有时不得不成为一个“坏人”。&lt;/p&gt;

&lt;p&gt;乔布斯是一个普通人，热爱禅学、服用迷幻药、性格反复无常、爱撒谎、擅长使用“现实扭曲力场”来改变他人的想法、刻薄，但他确实也是一位极其富有魅力的领导者。&lt;/p&gt;

&lt;p&gt;他的成功可以说是必然的。他在早期与癌症抗争时采用了错误的方式，但最终导致了他早逝的结果，可能也是一种必然。感谢乔布斯带给这个世界的一切，他存在过。&lt;/p&gt;

&lt;h3 id=&quot;推荐书籍五简约至上&quot;&gt;推荐书籍五：&lt;a href=&quot;https://book.douban.com/subject/30253370/&quot;&gt;简约至上&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;很薄的一本书，感觉没多久就看完了。看完乔布斯传又回过头来读此书。感觉确有互通之处。本书一如其名字，且配图合适有趣。所谓大道至简，应如是。5 星&lt;/p&gt;

&lt;h3 id=&quot;推荐书籍六邓小平时代&quot;&gt;推荐书籍六：&lt;a href=&quot;https://book.douban.com/subject/20424526/&quot;&gt;邓小平时代&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;后文革时代，国家内忧外患，跟着书本的思绪回到几十年前还是不由得让人倒吸一口冷气。&lt;/p&gt;

&lt;p&gt;敬佩，给力挽狂澜的邓公打 5 星，给书打 4 星。&lt;/p&gt;

&lt;h3 id=&quot;推荐书籍七平衡计分卡战略实践&quot;&gt;推荐书籍七：&lt;a href=&quot;https://book.douban.com/subject/3576464/&quot;&gt;平衡计分卡战略实践&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;知识脉络清晰，比《管理学：原理与实践》更富有实践意义。它给出了一个围绕战略地图的闭环，其中对我最有启发性的有：战略地图、整个组织以怎样的方式协同作战、对预算的解读。我更偏爱实践一些，因此本书我可以给 5 星。&lt;/p&gt;

&lt;h3 id=&quot;推荐书籍八学会提问&quot;&gt;推荐书籍八：&lt;a href=&quot;https://book.douban.com/subject/20428922/&quot;&gt;学会提问&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;本书的核心要点在于推崇批判性思维，且给出一些进行批判性思维的方式。虽然有些评论指出此书内容过于基础，但我却感觉它对我有很大帮助。对很多日常生活就会经历的逻辑问题，我确实已经有一些碎片化的认知，但这本书系统化的梳理又帮我好好捋了一下，可谓点睛之笔。我给 5 星。&lt;/p&gt;

&lt;h3 id=&quot;推荐书籍九俞军产品方法论&quot;&gt;推荐书籍九：&lt;a href=&quot;https://book.douban.com/subject/34907971/&quot;&gt;俞军产品方法论&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;久闻俞军大名。书中作者抛出了很多看似玄妙的概念和公式，实际不难理解。作者所提倡的逻辑为先、做正确的事，正是我所信仰的思考方式。本书叫做产品方法论，可实践的内容也确实充实。美中不足的是附录中的文章内容大多没有经过梳理，有价值的信息量骤降。本书给 4 星。&lt;/p&gt;

&lt;h3 id=&quot;推荐书籍十被讨厌的勇气&quot;&gt;推荐书籍十：&lt;a href=&quot;https://book.douban.com/subject/26369699/&quot;&gt;被讨厌的勇气&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;因“越自卑的人越自负”这句话而认识了这本书，认识了阿德勒。这是一本讲心理学的书，组织形式类似于古希腊先哲的对话录，也可以类比《论语》。罗老师（教刑法那位）说过，勇气是现代人最缺乏，也最宝贵的品质之一。而阿德勒的心理学，正是勇气的心理学。初读这本书会感到书中的观点很多都是反常识的，其中有诸多一眼看上去不大对味的“暴论”：“自由就是被别人讨厌”，“「拼命寻求认可」反而是以自我为中心”，“表扬和批评都不行”。但书中又以一种很温暖地方式教会你如何用一种全新的思考方式（目的论）来获得勇气。&lt;/p&gt;

&lt;p&gt;如果你遭遇了一些困顿，可以尝试跟书中的哲人聊聊看。心理学大都依赖于大量实验来证明一些结论，甚至可以称心理学为实验科学。但阿德勒的心理学则依赖于逻辑推演，到底孰优孰劣，很难下一个定论。而在一定程度上，我认可此书的逻辑，因此我给 5 星。&lt;/p&gt;

&lt;h2 id=&quot;后记&quot;&gt;后记&lt;/h2&gt;

&lt;p&gt;有时候看得太多，想得太多，也会产生一些迷茫的情绪。近期就险些落入虚无主义的圈套，就用庄子中的一句话跟大家共勉吧。希望大家在汲取知识养分之时，也不要迷失了前方的路。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;吾生也有涯，而知也无涯。以有涯随无涯，殆已！已而为知者，殆而已矣！为善无近名，为恶无近刑，缘督以为经，可以保身，可以全生，可以养亲，可以尽年。 —— 庄子·内篇·养生主第三&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 13 Feb 2021 11:31:00 +0000</pubDate>
        <link>https://jerryzou.com/posts/2021-recommended-book-list/</link>
        <guid isPermaLink="true">https://jerryzou.com/posts/2021-recommended-book-list/</guid>
      </item>
    
      <item>
        <title>HitKounter 替换 CDN 服务地址的公告</title>
        <description>&lt;p&gt;三年前，我发布了一个用于统计博客访问量的小工具，HitKounter。这些年来不少用户正在使用这个小玩意儿，这让我感到很开心！&lt;/p&gt;

&lt;p&gt;但是最近出了一些小问题。之前我将 HitKounter JavaScript 脚本直接上传到了又拍云的对象存储中。那时我直接将又拍云提供的测试访问链接开放出来，以供大家使用。&lt;/p&gt;

&lt;p&gt;由于本站一直使用的是 Github Pages 服务，尚未备案。因此由于最近又拍云服务政策的更变，已无法再享受到又拍云的服务。曾经公布的 CDN 地址不得不作废了，将在 2019 年 6 月 5 日失效。现在大家可以通过以下链接进行访问：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://sinacloud.net/egg-lib/hit-kounter/hit-kounter-lc-0.4.1.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;感谢大家一如既往的支持！&lt;/p&gt;
</description>
        <pubDate>Fri, 31 May 2019 15:00:00 +0000</pubDate>
        <link>https://jerryzou.com/posts/hit-kounter-notification/</link>
        <guid isPermaLink="true">https://jerryzou.com/posts/hit-kounter-notification/</guid>
      </item>
    
      <item>
        <title>像呼吸一样自然：React hooks + RxJS</title>
        <description>&lt;p&gt;上个月的 React Conf 上，React 核心团队首次将 hooks 带到的公众们的眼前。起初我看到这样奇怪的东西，对它是很抗拒的。Dan 说 JavaScript 里的 this 太黑了，从其他语言转来写 React 的人会很不适应。然而 hooks 本质上也是一种黑魔法，需要理解它的本质依旧需要对 JS 的各种闭包和作用域的问题搞得很透彻才行。&lt;/p&gt;

&lt;p&gt;然而后来，跟 hooks 打了几天交道以后，我感觉这个想法还是挺有意思的。首先推荐一下 React Conf 上的开篇演讲：&lt;a href=&quot;https://www.youtube.com/watch?v=dpw9EHDh2bM&quot;&gt;React Today and Tomorrow and 90% Cleaner React With Hooks&lt;/a&gt;，值得一看。&lt;/p&gt;

&lt;p&gt;我们团队一直对 RxJS 青睐有加，但一直苦于它和 React 结合起来使用实在是有些繁琐。上周 @太狼 就决定在 hooks api 上试试水。结果那一整天我都听见身边在喊，“真香”。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sinacloud.net/heaven-blog-files/images/posts/rxjs-hooks/真香.gif&quot; alt=&quot;真香&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;rxjs-hooks&quot;&gt;rxjs-hooks&lt;/h2&gt;

&lt;p&gt;那么用 hooks 写 RxJS 代码究竟有多香呢？让我们一起来看看，这个让妈妈开心，开了又开的开源项目：&lt;a href=&quot;https://github.com/LeetCode-OpenSource/rxjs-hooks&quot;&gt;LeetCode-OpenSource/rxjs-hooks&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sinacloud.net/heaven-blog-files/images/posts/rxjs-hooks/ben-lesh.png&quot; alt=&quot;ben-lesh-twitter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们有完整的测试用例，测试覆盖率 100%。目前一共只有两个 hooks：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useObservable&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEventCallback&lt;/code&gt;。还是直接用例子解释来得简单明了，让我们首先回想一下，怎么在 React Component 中创建、订阅，并销毁一个流。大概是这个样子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;rxjs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tap&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;rxjs/operators&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Timer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Component&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;subscription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;componentDidMount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	  &lt;span class=&quot;nx&quot;&gt;tap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;componentWillUnmount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;unsubscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;手动订阅，手动管理声明周期，还要通过 React 中的 state 搭建一个与 render 函数 (UI) 之间的桥梁。那么使用 rxjs-hooks 之后呢：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;React&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;react&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;rxjs&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useObservable&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;rxjs-hooks&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;没有手动订阅，不需要再理会生命周期的管理。只需要一个&lt;a href=&quot;https://bundlephobia.com/result?p=rxjs-hooks@0.2.0&quot;&gt;不到 1kb 的依赖&lt;/a&gt;，就能在 React 世界里快乐地拥抱 RxJS 。&lt;/p&gt;

&lt;h3 id=&quot;api-详解&quot;&gt;API 详解&lt;/h3&gt;

&lt;p&gt;本小节中将结合一些例子来简单介绍一下 rxjs-hooks 中的两个 API。详细的类型定义可以 &lt;a href=&quot;https://github.com/LeetCode-OpenSource/rxjs-hooks#apis&quot;&gt;访问这里&lt;/a&gt; 查看。下面会结合例子进行讲解，这样应该会比较通俗易懂一点。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;以下案例均基于 RxJS 6&lt;/li&gt;
  &lt;li&gt;如果对 React hooks 不够了解，建议先看文首推荐的视频或 &lt;a href=&quot;https://reactjs.org/docs/hooks-intro.html&quot;&gt;React 官方博客&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;useobservable&quot;&gt;useObservable&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;案例 1：无默认值，不依赖外部状态&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在此案例中，仅传递了第一个参数，它是 Observable 的工厂函数，需要返回一个 Observable，而 useObservable 的返回值永远是流的最新值。首次渲染只有一个内容为空的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;h1&amp;gt;&lt;/code&gt;；1 秒后，内容变为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;；2 秒后，内容变为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;…&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;案例 2：有默认值&lt;/strong&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在第二个案例中，我们传递了第二个参数，它就是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;val&lt;/code&gt; 的默认值。所以在这种情况下，首次渲染的内容不再为空，而是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-1&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;案例 3：依赖上一次的执行状态&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果你需要在流中获得上一次输出的结果时，工厂函数会传入一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state$&lt;/code&gt; 流来帮助你做到这一点。（此处一定要使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;withLatestFrom&lt;/code&gt; 来结合这个流，否则会造成无限循环）&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;withLatestFrom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;state$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prevVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;prevVal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// first render:    0&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 1s later:        1    (1 + 0)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 2s later:        3    (2 + 1)  &lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 3s later:        6    (3 + 3)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 4s later:       10    (4 + 6)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;案例 4：依赖外部状态&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;工厂函数可以依赖一些外部传入的状态，通过 useObservable 的第三个参数传入（和 &lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#useeffect&quot;&gt;useEffect&lt;/a&gt;，&lt;a href=&quot;https://reactjs.org/docs/hooks-reference.html#usememo&quot;&gt;useMemo&lt;/a&gt; 的接口类似）&lt;/p&gt;

&lt;p&gt;如果传递了第三个参数，那么工厂函数中，就会得到两个流，分别为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input$&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state$&lt;/code&gt;。在下面的例子中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;input$&lt;/code&gt; 流发出的值总是一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[a, b]&lt;/code&gt; 元组。为了使例子比较易于理解，所以我们暂时不使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;state$&lt;/code&gt; 流。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useObservable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputs$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;_state$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;timer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;combineLatest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;inputs$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(([&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Timer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这个例子相对较为复杂，可以结合 &lt;a href=&quot;https://codesandbox.io/s/8y5nx3pyo8&quot;&gt;live demo&lt;/a&gt; 理解。&lt;/p&gt;

&lt;h4 id=&quot;useeventcallback&quot;&gt;useEventCallback&lt;/h4&gt;

&lt;p&gt;我们相信 RxJS 不仅十分擅长处理数据流，同时在处理一些交互逻辑上也有很大的帮助。因此我们设计了第二个 API &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEventCallback&lt;/code&gt;，它接受的三个参数。其中，后两个参数与 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useObservable&lt;/code&gt; 有很大相似之处，因此这边着重介绍第一个形参与返回值。&lt;/p&gt;

&lt;p&gt;首先来看看下面的例子 (&lt;a href=&quot;https://codesandbox.io/s/jpjr31qmw&quot;&gt;live demo&lt;/a&gt;)，可以很容易地看出：返回值和 useEventCallback 不一样了，它会返回一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[callback, value]&lt;/code&gt; 元组。同时接受的工厂函数，接受一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event$&lt;/code&gt; 参数，每当 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;callback&lt;/code&gt; 被调用时，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event$&lt;/code&gt; 流总会有一个新的值流出。而 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;useEventCallback&lt;/code&gt; 函数的第二个参数依旧是我们熟悉的默认值。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clickCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;useEventCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;innerHTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;nothing&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;className&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;{description}&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;was&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clicked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clickCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clickCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;button&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clickCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;him&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/button&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/div&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;更多实际案例&quot;&gt;更多实际案例&lt;/h3&gt;

&lt;p&gt;这里附上一些简单的实际案例，可以帮助大家进一步理解 rxjs-hooks 的用法。代码就不贴在正文中啦，有兴趣的小伙伴可以访问下面案例中的在线链接玩一下。&lt;/p&gt;

&lt;h4 id=&quot;案例-1drag-me&quot;&gt;案例 1：Drag me&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://codesandbox.io/s/9382vrr4xy&quot;&gt;live demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sinacloud.net/heaven-blog-files/images/posts/rxjs-hooks/drag.gif&quot; alt=&quot;drag&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;案例两栏-resizable-布局&quot;&gt;案例：两栏 resizable 布局&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://codesandbox.io/s/k9609z20w5&quot;&gt;live demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sinacloud.net/heaven-blog-files/images/posts/rxjs-hooks/resizer.gif&quot; alt=&quot;resizer&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;案例尾随队列&quot;&gt;案例：尾随队列&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;https://codesandbox.io/s/94qm201pw4&quot;&gt;live demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sinacloud.net/heaven-blog-files/images/posts/rxjs-hooks/drag-list.gif&quot; alt=&quot;drag-list&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;至此 &lt;a href=&quot;https://github.com/LeetCode-OpenSource/rxjs-hooks&quot;&gt;rxjs-hooks&lt;/a&gt; 就先介绍到这儿。我们的实现不一定是对 hooks 最好的理解，权当抛砖引玉。很期待社区有更多人能参与到这项变革中来，我们也很乐意和大家分享所遇到的各种踩坑之旅。同时，随时欢迎大家给这个项目提 issue 或者 PR。&lt;/p&gt;

</description>
        <pubDate>Mon, 26 Nov 2018 16:53:00 +0000</pubDate>
        <link>https://jerryzou.com/posts/rxjs-hooks/</link>
        <guid isPermaLink="true">https://jerryzou.com/posts/rxjs-hooks/</guid>
      </item>
    
      <item>
        <title>阻碍你使用 GraphQL 的十个问题</title>
        <description>&lt;p&gt;在最近半年中，LeetCode 的一些新功能已经开始尝试使用 GraphQL。如果你在 LeetCode 网站中查看一下开发者工具中收集到的请求，也许会发现一个与众不同的请求 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POST https://leetcode.com/graphql/&lt;/code&gt;。是的，要是你想给 LeetCode 写些爬虫的话，可得好好研究一下我们在这个 Endpoint 下挂载了哪些数据。&lt;/p&gt;

&lt;p&gt;我在使用 GraphQL 的过程中经历了理解、误解、再理解的过程。作为吃了 GraphQL 这个螃蟹的人，希望能够通过这篇文章更好地帮助各位读者理解 GraphQL 是什么，GraphQL 会给你带来什么，以及将 GraphQL 应用于你的系统中需要注意哪些问题。这不是一篇系统的科普文，如果你有什么其他疑问可以评论中留言询问。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;以下内容皆为作者个人理解，如果错误，欢迎讨论指出。我会随时修正，拜谢！&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-什么是-graphql&quot;&gt;1. 什么是 GraphQL？&lt;/h2&gt;

&lt;p&gt;从官方的定义来说，GraphQL 是一种针对 API 的查询语言；在我看来，&lt;a href=&quot;https://facebook.github.io/graphql/&quot;&gt;GraphQL 是一种标准&lt;/a&gt;，而与标准相对的便是实现。就像 EcmaScript 与 JavaScript 的关系，从一开始你就&lt;strong&gt;需要有这样一种认知&lt;/strong&gt;：GraphQL 只定义了这种查询语言语法如何、具体的语句如何执行等。&lt;strong&gt;但是&lt;/strong&gt;，你在真正使用&lt;strong&gt;某种 GraphQL 的服务端实现&lt;/strong&gt;时，是有可能发现 GraphQL 标准中所描述的特性尚未被实现；或者这种 GraphQL 的实现扩展了 GraphQL 标准所定义的内容。&lt;/p&gt;

&lt;p&gt;举例来说，就像 ES 2017 标准正式纳入了 async/await，而从实现的角度上说，IE 没有实现这一标准，而 Edge 16 和 Chrome 62 则实现了这一标准（数据来源于 &lt;a href=&quot;https://caniuse.com/#feat=async-functions&quot;&gt;caniuse&lt;/a&gt;）说回 GraphQL 标准，与之相对的有&lt;a href=&quot;https://graphql.org/code/&quot;&gt;相当多的服务器端实现&lt;/a&gt;。他们的大多遵循 GraphQL 标准来实现，但也可能稍有差别，这一切需要你自己去探索。&lt;/p&gt;

&lt;h2 id=&quot;2-如何从零入门-graphql&quot;&gt;2. 如何从零入门 GraphQL？&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;先看标准：https://graphql.org/ （纯 GraphQL，与任何什么 JavaScript, Python 都无关）&lt;/li&gt;
  &lt;li&gt;再看服务端实现：到 https://graphql.org/code/ 里找到跟你的服务端技术有关的实现&lt;/li&gt;
  &lt;li&gt;再看客户端实现：&lt;a href=&quot;https://facebook.github.io/relay/&quot;&gt;Relay&lt;/a&gt; 或 &lt;a href=&quot;https://www.apollographql.com/docs/react/&quot;&gt;appollo-client&lt;/a&gt;, etc.&lt;/li&gt;
  &lt;li&gt;学习使用 DataLoader 来获取列表数据&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;3-graphql-与-restful-有什么区别&quot;&gt;3. GraphQL 与 RESTful 有什么区别？&lt;/h2&gt;

&lt;p&gt;首先放上一张来自于 graphql.org 的图片。REST 与 GraphQL 都是服务端所承载的系统对外的服务接口，因此两者肯定是可以共存的，甚至可以共用一套 Authorization 等业务逻辑。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sinacloud.net/heaven-blog-files/images/posts/backend-arch.png&quot; alt=&quot;Architecture&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那么 GraphQL 与 RESTful 的具体区别有什么呢？我觉得主要是两点。&lt;/p&gt;

&lt;h4 id=&quot;1-入口-entry-point&quot;&gt;1. 入口 (entry point)&lt;/h4&gt;

&lt;p&gt;RESTful 的核心理念在于资源 (resource)，且讲究一个 RESTful 接口仅操作单一资源；因此在你使用 RESTful 时，会设计出大量的接口。GraphQL 是单一入口，一般配置在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[host]/graphql/&lt;/code&gt;，所有的资源都从该入口通过 graphql 的语句获取或修改（当然 GraphQL 亦支持多入口，但显然多入口的数量也远小于 RESTful）。&lt;/p&gt;

&lt;h4 id=&quot;2-数据的关联性&quot;&gt;2. 数据的关联性&lt;/h4&gt;

&lt;p&gt;RESTful 所操作的资源相对是离散的；而 GraphQL 的数据更有整体性。&lt;/p&gt;

&lt;p&gt;举个例子，如果要获取 A 的朋友的朋友，用 RESTful 该怎么做呢？&lt;/p&gt;

&lt;p&gt;假设我们有这样一个接口：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;GET /user/:userId/friends/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;而 A 有 20 个好朋友，那么我们总共需要发送 20 + 1 = 21 次 REST 请求。&lt;/p&gt;

&lt;p&gt;或者我们为了这种特殊场景设计出以下接口：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;GET /user/:userId/friendsAndHisFriends/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;emmmmm… 虽然看起来很别扭，但是只需要一次请求呢！&lt;/p&gt;

&lt;p&gt;那么在 GraphQL 中，怎么做呢？&lt;/p&gt;

&lt;p&gt;首先我们需要给 User 定义 Schema (GraphQL 有一套完整的&lt;a href=&quot;https://graphql.org/learn/schema/&quot;&gt;类型系统&lt;/a&gt;)：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;type User {
  id: ID!
  name: String!
  friends: [User]
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;假设我们在 Graph root 上只挂了一个 Node，叫 user:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;type Query {
  user(id: ID!): User
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;那么我们从客户端发送的 query 就可以写成这样：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;query ($&lt;/span&gt;userId: ID&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;  user(id: $&lt;/span&gt;userId&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    name
    friends {
      name
      friends {
        name
      }
    }
  }
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;最后这一个请求就搞定查询朋友的朋友这个蛋疼的需求啦！机智的你肯定已经发现了：这个 query 是不是可以无限循环地写下去？你想的没错，确实可以这么干！在 GraphQL 的官网上是这么形容自己的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s Graphs All the Way Down &lt;a href=&quot;https://en.wikipedia.org/wiki/Turtles_all_the_way_down&quot;&gt;*&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;它就像是一颗无限向下延伸的树。所以在我看来，GraphQL 更应该叫 TreeQL，当然在图论里，Tree 就是 Graph 也没毛病啦。需要注意的是，这也会引出 “N + 1 problem” 的话题——naive 的 GraphQL 服务端实现会让这段 query 变得异常慢！&lt;/p&gt;

&lt;p&gt;怎么解决这个棘手的问题？心急的小伙伴请跳转到 &lt;a href=&quot;#61-n1-问题&quot;&gt;6.1 N+1 问题&lt;/a&gt;！&lt;/p&gt;

&lt;h2 id=&quot;4-graphql-能做到修改数据吗&quot;&gt;4. GraphQL 能做到修改数据吗？&lt;/h2&gt;

&lt;p&gt;看了上面的 query 的例子，你肯定很好奇，graphql 这种看上去好像只为查询而存在的语言，是不是有办法做到修改数据呢？&lt;/p&gt;

&lt;p&gt;答案是：能。&lt;/p&gt;

&lt;p&gt;仅仅为了使得 GraphQL 这个 data platform &lt;strong&gt;变得更加完整&lt;/strong&gt;，GraphQL 标准中加入了一种操作符，名为 &lt;strong&gt;mutation&lt;/strong&gt;。因为我觉得这种设计确实比较一般，此处就不举例了，详情见：&lt;a href=&quot;https://graphql.org/learn/queries/#mutations&quot;&gt;https://graphql.org/learn/queries/#mutations&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;5-graphql-与-restful-相比有什么优点&quot;&gt;5. GraphQL 与 RESTful 相比有什么优点？&lt;/h2&gt;

&lt;h4 id=&quot;1-数据的关联性和结构化更好&quot;&gt;1. 数据的关联性和结构化更好&lt;/h4&gt;

&lt;p&gt;这一点已经在本文的第 3 个问题中有所描述。&lt;/p&gt;

&lt;h4 id=&quot;2-更易于前端缓存数据&quot;&gt;2. 更易于前端缓存数据&lt;/h4&gt;

&lt;p&gt;这个一般像 Relay 和 apollo-client 都替你做好了，如果你想了解它的缓存原理，请移步 &lt;a href=&quot;https://graphql.org/learn/caching/&quot;&gt;GraphQL Caching&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;3-versionless-api&quot;&gt;3. Versionless API&lt;/h4&gt;

&lt;p&gt;相比于 RESTful 为了兼容新老客户端所添加的版本号，在 GraphQL 中，如果你需要服务端提供与以前不一样的行为，只需要修改 root Query 的定义，在上面额外添加你想要的 Node 即可。&lt;/p&gt;

&lt;h4 id=&quot;4-更健壮的接口&quot;&gt;4. 更健壮的接口&lt;/h4&gt;

&lt;p&gt;不用再因为在缺乏沟通的情况下修改接口，而为系统埋下不稳定的定时炸弹。一切面向前端的接口都有强类型的 Schema 做保证，且完整类型定义因 &lt;a href=&quot;https://graphql.org/learn/introspection/&quot;&gt;introspection&lt;/a&gt; 完全对前端可见，一旦前端发送的 query 与 Schema 不符，能快速感知到产生了错误。&lt;/p&gt;

&lt;h4 id=&quot;5-令人期待的-subscription&quot;&gt;5. 令人期待的 subscription&lt;/h4&gt;

&lt;p&gt;如何在浏览器中接受服务端的推送信息是个老生常谈的问题。从最初的轮询，到后来的 WebSocket。如今 GraphQL 也计划引入除了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;query&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mutation&lt;/code&gt; 以外的第三种操作符 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscription&lt;/code&gt;，以便于直接接受服务器推送数据。在 2015 年底 GraphQL 官方发布了一篇博文：&lt;a href=&quot;https://graphql.org/blog/subscriptions-in-graphql-and-relay/&quot;&gt;Subscriptions in GraphQL and Relay&lt;/a&gt; 来介绍 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;subscription&lt;/code&gt; 在他们的 iOS 和 Android App 中的应用。可惜的是相关的代码仍未开源，目前开源社区能找到的解决方案目前只有 Apollo 社区为 Node.js 写的 &lt;a href=&quot;https://github.com/apollographql/graphql-subscriptions&quot;&gt;graphql-subscriptions&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;6-graphql-有什么缺点&quot;&gt;6. GraphQL 有什么缺点？&lt;/h2&gt;

&lt;p&gt;说了 GraphQL 的那么多优点，那么它有没有缺点呢？当然也是有的。&lt;/p&gt;

&lt;h4 id=&quot;61-n1-问题&quot;&gt;6.1. N+1 问题&lt;/h4&gt;

&lt;p&gt;最大的问题莫过于：在实现 GraphQL 服务端接口时，很容易就能写出效率极差的代码，引起 “N+1 问题”。&lt;/p&gt;

&lt;p&gt;什么是 N+1 问题？首先我们来举个简单的例子：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这是一段简单的 python 代码，使用了 Django 的 QuerySet 来从数据库抓取数据。假设我们的数据库中有两张表 User 和 UserScore 这两张表的关系如下所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sinacloud.net/heaven-blog-files/images/posts/graphql-uml.jpg&quot; alt=&quot;UML&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于用户的分数并没有保存在 User 表中，又因为 QuerySet 有 lazy load 的特性，所以在 for 循环中，每一次获取 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;user.score&lt;/code&gt; 都会查一次表，最终原本 1 次数据库查询能搞定的问题，却在不恰当的实现中产生了 N+1 次对数据库的访问。&lt;/p&gt;

&lt;p&gt;相对于 RESTful，在 GraphQL 中更加容易引起 N+1 问题。主要是由于 GraphQL query 的逐层解析方式所引起的，关于 GraphQL 如何执行 query 的细节，可以参阅 &lt;a href=&quot;https://graphql.org/learn/execution/&quot;&gt;Graphql Execution&lt;/a&gt;。&lt;/p&gt;

&lt;h4 id=&quot;62-如何解决在-graphql-中的-n--1-问题&quot;&gt;6.2. 如何解决在 GraphQL 中的 N + 1 问题？&lt;/h4&gt;

&lt;p&gt;以下解决方案仅针对关系型数据库，如果你的项目中使用的是 NoSQL，可能解决方案有较大差别。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;针对&lt;strong&gt;一对一&lt;/strong&gt;的关系（比如我上面举例中提到的这个 User 与 UserScore 的关系），在从数据库里抓取数据时，就将所需数据 join 到一张表里。别等着 ORM 框架替你懒加载那些你需要的数据。&lt;/li&gt;
  &lt;li&gt;针对&lt;strong&gt;多对一或者多对多&lt;/strong&gt;的关系，你就要用到一个叫做 &lt;strong&gt;DataLoader&lt;/strong&gt; 的工具库了。其中，Facebook 为 Node.js 社区提供了 &lt;a href=&quot;https://github.com/facebook/dataloader&quot;&gt;DataLoader 的实现&lt;/a&gt;。DataLoader 的主要功能是 batching &amp;amp; caching，可以将多次数据库查询的请求合并为一个，同时已经加载过的数据可以直接从 DataLoader 的缓存空间中获取到。这个话题要是展开说也得写一篇新的文章了，此处不多赘述。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;7-有什么可以快乐地调试-graphql-接口的方法&quot;&gt;7. 有什么可以快乐地调试 GraphQL 接口的方法？&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/graphql/graphiql&quot;&gt;GraphiQL&lt;/a&gt; / &lt;a href=&quot;https://graphql.org/swapi-graphql/&quot;&gt;live demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用 GraphiQL 可以很容易地让人感受到“代码即文档”的快乐。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sinacloud.net/heaven-blog-files/images/posts/graphiql-screenshot.png&quot; alt=&quot;GraphiQL screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;8-如何选择-graphql-的客户端实现&quot;&gt;8. 如何选择 GraphQL 的客户端实现？&lt;/h2&gt;

&lt;p&gt;客户端常见的框架有 &lt;a href=&quot;https://facebook.github.io/relay/&quot;&gt;Relay&lt;/a&gt; 和 &lt;a href=&quot;https://www.apollographql.com/client/&quot;&gt;Apollo Client&lt;/a&gt;。Relay 是由 Facebook 官方提供的解决方案，而 Apollo 则是在 GraphQL 方面热度超高的社区。&lt;/p&gt;

&lt;p&gt;使用 Relay 的好处是，许多 GraphQL 的服务端框架都会支持 Relay 的标准（比如数据的分页接口）。而 apollo-client 的实现其实又在诸多方面宣称自己兼容 Relay 的风格，所以使用起来应该也是大同小异。当然笔者并没有真实地使用过 Relay，在  GraphQL 方面的经验也不够深刻，所以也不好妄下断言。&lt;/p&gt;

&lt;p&gt;做技术选型时，同事 Ashish 说担心 Relay 太过于重量级，所以并没有决定使用 Relay。这种选择的正确性尚待考证，目前在 LeetCode 实际项目中使用了 apollo-client。&lt;/p&gt;

&lt;h2 id=&quot;9-graphql-中是怎么处理分页的&quot;&gt;9. GraphQL 中是怎么处理分页的？&lt;/h2&gt;

&lt;p&gt;这是一个可能让 GraphQL 初学者担忧的问题，又是一个可以从&lt;a href=&quot;https://graphql.org/learn/pagination/&quot;&gt;官方文档&lt;/a&gt;中找到答案的问题。&lt;/p&gt;

&lt;p&gt;再以找朋友为例，借用 SQL 查询中常用的筛选方法，分页接口可以设计为：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;query ($&lt;/span&gt;userId: ID&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;  user(id: $&lt;/span&gt;userId&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;    name
    friends(first: 2, offset: 3) {
      name
    }
  }
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;上面的例子意为从 $userId 的第 4 个朋友开始算起，取前 2 个朋友。&lt;/p&gt;

&lt;p&gt;类似地，分页接口还可以设计为&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;friends(first: 2, after: $friendId)&lt;/code&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;friends(first: 2, after: $friendCursor)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;无论分页接口设计成怎么样，都需要&lt;strong&gt;前后端共同的&lt;/strong&gt;封装与支持。其中 Relay 风格的分页接口在各大前后端 GraphQL 框架中基本都已有比较完整的实现。&lt;/p&gt;

&lt;h4 id=&quot;91-relay-风格的分页接口&quot;&gt;9.1 Relay 风格的分页接口&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;参阅 &lt;a href=&quot;https://facebook.github.io/relay/graphql/connections.htm&quot;&gt;Relay Cursor Connections Specification&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;注：apollo-client 兼容该分页接口&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;query {
  user {
    name
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;    friends(first: 2, after: $&lt;/span&gt;cursor&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;      edges {
        cursor
        node {
          id
          name
        }
      }
      pageInfo {
        hasNextPage
      }
    }
  }
}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;10-graphql-中是怎么实现用户校验的&quot;&gt;10. GraphQL 中是怎么实现用户校验的？&lt;/h2&gt;

&lt;p&gt;你可以回看一下 &lt;a href=&quot;#3-graphql-与-restful-有什么区别&quot;&gt;3. GraphQL 与 RESTful 有什么区别&lt;/a&gt; 中展示的图片，答案就在其中：Authentication 属于业务逻辑层干的事情，别让 GraphQL 承担太多工作啦。&lt;/p&gt;

&lt;p&gt;扩展阅读：&lt;a href=&quot;https://graphql.org/learn/authorization/&quot;&gt;GraphQL Authentication&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;p&gt;鉴于网上中文的 GraphQL 资料比较有限，所以根据笔者自己的理解，总结出了此文。这十个问题可能是我入门 GraphQL 时比较关心的问题，不一定完全适用于所有人。由于篇幅所限，文中有很多细节并未展开，如果你对哪些问题想要有更深入的理解，GraphQL 官方文档是很重要的资源。此文仅作抛砖引玉之用，希望社区中能有更多关于 GraphQL 使用姿势的分享。&lt;/p&gt;

&lt;p&gt;另外，我们 LeetCode 上海的招聘工作会在春节后全面展开，欢迎投递简历。&lt;a href=&quot;https://leetcodechina.com/jobs/&quot;&gt;https://leetcodechina.com/jobs/&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/graphql/&quot;&gt;GraphQL Specification&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://caniuse.com/#feat=async-functions&quot;&gt;Async functions - caniuse&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://graphql.org/&quot;&gt;Learn GraphQL&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000004586237#articleHeader5&quot;&gt;GraphQL and Relay 浅析&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://graphql.org/blog/subscriptions-in-graphql-and-relay/&quot;&gt;Subscriptions in GraphQL and Relay&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://facebook.github.io/relay/graphql/connections.htm&quot;&gt;Relay Cursor Connections Specification&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 19 Feb 2018 04:57:00 +0000</pubDate>
        <link>https://jerryzou.com/posts/10-questions-about-graphql/</link>
        <guid isPermaLink="true">https://jerryzou.com/posts/10-questions-about-graphql/</guid>
      </item>
    
      <item>
        <title>浅谈前端中的过早优化问题</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Premature optimization is the root of all evil.
过早优化是万恶之源。 —— &lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E9%AB%98%E5%BE%B7%E7%BA%B3&quot;&gt;Donald Knuth&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;还记得大四的软件优化课上，课的主题虽然是关于各种优化手段的，但老师讲的第一门课的 PPT 里依旧给这句话留了独立的一页。在近期的工作中，我就碰到了不少因为“过早优化”带来的麻烦。稍微整理了一下思绪，便有了这篇短文。&lt;/p&gt;

&lt;h2 id=&quot;1-什么是过早优化&quot;&gt;1. 什么是过早优化？&lt;/h2&gt;

&lt;p&gt;翻阅了一下知乎上&lt;a href=&quot;https://www.zhihu.com/question/24282796/answer/27279410&quot;&gt;轮子哥对于这个问题的看法&lt;/a&gt;，还是很符合我的看法的：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;过早指的不是在开发过程的早期，而是在还没弄清楚&lt;strong&gt;需求未来的变化的走向&lt;/strong&gt;的时候。你的优化不仅可能导致你无法很好地实现新的需求，而且你对优化的预期的猜测有可能还是错的，导致实际上你除了把代码变复杂以外什么都没得到。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;在我看来，过早优化的特征有二：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对所要实现的系统没有一个全面的规划，是为其一；&lt;/li&gt;
  &lt;li&gt;需求本身不够稳定，或对需求的理解不够透彻，是为其二。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;没有全面的规划，就容易拘泥于细节。对于需求分析不够清晰，则往往会制造许多南辕北辙的废代码。在时机仍不成熟时，就针对一些细节上动用太多的脑筋、早早地开始优化性能，不仅会大大地增加代码复杂度，而且这些优化在很多情况还会对后面的开发工作增添大量的障碍。&lt;/p&gt;

&lt;p&gt;最近在开发基于 Draft 的富文本编辑器时，需要完成一个表格编辑的功能。由于 Draft 本身的扁平化结构，要在它上面构建一套表格编辑的交互是是一件非常麻烦的事。&lt;/p&gt;

&lt;p&gt;在初期我并不知道如何去实现这个表格功能，所以写了好些预研性质的代码进行测试。其中，便使用了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt; 来避免&lt;strong&gt;不必要的渲染&lt;/strong&gt;。在不断补全各种功能的同时，表格渲染总会出现这样那样的问题。后来经过仔细检查，我发现原来我在表格组件生命周期中所实现的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;shouldComponentUpdate()&lt;/code&gt;，在某些情况下把需要重新渲染的状态也给跳过了。相信很多 React 开发者也会遇到此类问题，比如来自石墨的这位兄弟便在&lt;a href=&quot;https://zhuanlan.zhihu.com/p/29103532&quot;&gt;文章&lt;/a&gt;中把自己批判了一番。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;我们在迁移到 React 的初期，由于团队只有少数几个人接触过这个框架，所以经历了一段时间的「阵痛」，例如对于 shouldComponentUpdate 的错误使用使得一些错误变得不易追踪调试。……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;另外，&lt;strong&gt;前端的缓存策略&lt;/strong&gt;也是一个单页应用需要好好考虑的优化点。如果缓存基本难以命中倒还好，如果应用一直在使用已经过期的缓存，问题就很大了。一旦在项目中使用了没有经过推敲的缓存失效策略，很容易就会导致很多难以预期的结果。（所以目前我们已经在我们的应用中把缓存暂时禁用了，等应用的大部分功能都稳定以后再去考虑怎么合理地控制缓存失效的策略）&lt;/p&gt;

&lt;h2 id=&quot;2-避免过早优化的原则&quot;&gt;2. 避免过早优化的原则&lt;/h2&gt;

&lt;p&gt;今天公司的 AMA 上，严老师展示了一下他上周去深圳学习交流的体验。其中他反复说道的，也是来自腾讯的讲师们反复提到的一句话是这样说的：&lt;strong&gt;先抗住，后优化&lt;/strong&gt;。这句话当然是很后端工程师做派的，不过我觉得对前端也适用。&lt;/p&gt;

&lt;p&gt;展开来说，要避免过早优化，只需要注意两点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;逐步完善系统，不追求一步到位；&lt;/li&gt;
  &lt;li&gt;在考虑优化的同时，需要清楚它所带来的收益和影响范围。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果优化并不是在写代码时需要第一考虑的点，那什么才是更需要关注的呢？我的答案是：&lt;strong&gt;代码的可读性和可维护性&lt;/strong&gt;；展开说还包括了代码的复用性、抽象层次。别太担心性能。你要多好的性能，“比尔”都会帮你从“安迪”那儿抢过来的。[doge]&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;What Andy gives, Bill takes away. —— &lt;a href=&quot;https://baike.baidu.com/item/%E5%AE%89%E8%BF%AA%E6%AF%94%E5%B0%94%E5%AE%9A%E7%90%86?fromId=2066996&quot;&gt;安迪-比尔定律&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;尾声&quot;&gt;尾声&lt;/h2&gt;

&lt;p&gt;过早优化时常出现在我们的开发过程中，不知不觉就会为我们的 code base 带来不必要的负担。时刻感知到这一问题的存在，知道何时该优化、何时不该优化，是一名优秀的软件工程师必备的素养之一。&lt;/p&gt;

&lt;p&gt;避免过早优化不是说就不用优化了；当在系统遇到瓶颈时，优化在所难免。而如何进行系统性能瓶颈的检测以及如何进行优化又是另一个很大的话题了，此文就不做赘述啦。&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Sep 2017 15:50:00 +0000</pubDate>
        <link>https://jerryzou.com/posts/talk-about-premature-optimization/</link>
        <guid isPermaLink="true">https://jerryzou.com/posts/talk-about-premature-optimization/</guid>
      </item>
    
      <item>
        <title>RxJS 实战篇（一）拖拽</title>
        <description>&lt;script async=&quot;&quot; src=&quot;https://production-assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;面对交互性很强、数据变化复杂的场景，传统的前端开发方式往往存在一些共有的问题：&lt;strong&gt;1).&lt;/strong&gt; UI 状态与数据难以追踪；&lt;strong&gt;2).&lt;/strong&gt; 写出的代码可读性很差，逻辑代码分布离散。
相比之下，响应式编程（Reactive Programming）在解决此类问题上有着得天独厚的优势。Vue、Mobx、RxJS 这些库都是响应式编程思想的结晶。&lt;/p&gt;

&lt;p&gt;很多人在接触到 RxJS 后会有一个共同的感觉：这个库虽然很强大，但奈何各种各样的 operators 太多了，在实际场景中根本不知道怎么运用！所以本文并不旨在阐释响应式编程的优越性，而是通过循序渐进的实例来展示 RxJS 常用 operators 的使用场景。如果你尚未入门 RxJS，推荐你可以先看看一位来自台湾的前端工程师 Jerry Hong 写的 &lt;a href=&quot;https://ithelp.ithome.com.tw/articles/10186103&quot;&gt;30 天精通 RxJS 系列&lt;/a&gt;。不要被三十天这个标题给吓到啦，如果你有一些函数式编程的经验的话，周末花一天时间就能看完。当然要加深对 RxJS 的理解还是得多多实战。毕竟实践出真知嘛！&lt;/p&gt;

&lt;p&gt;本文不适合 &lt;strong&gt;未入门的新手&lt;/strong&gt; 与 &lt;strong&gt;已精通的高手&lt;/strong&gt;。如果你觉得你对 RxJS 有了初步的认识，但掌握程度不高，可能这篇文章就比较适合你了。你可以尝试跟着本文的三个实例自己先做做看，再对比一下本文给出的解决方案，相信你能对 RxJS 有更深入的理解。注意，本文给出的解决方案并不一定是最优的解决方案，如果你有什么改进的建议，可以在文末留言，谢谢！&lt;/p&gt;

&lt;h2 id=&quot;1-简单的拖拽&quot;&gt;1. 简单的拖拽&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：给定一个小方块，实现简单的拖拽功能，要求鼠标在小方块上按下后能够拖着小方块进行移动；鼠标放开后，则运动停止。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;要实现一个简单的拖拽，需要对 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mousedown&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mousemove&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mouseup&lt;/code&gt; 等多个事件进行观察，并相应地改变小方块的位置。&lt;/p&gt;

&lt;p&gt;首先分析一下，为了相应地移动小方块，我们需要知道的信息有：&lt;strong&gt;1).&lt;/strong&gt; 小方块被拖拽时的初始位置；&lt;strong&gt;2).&lt;/strong&gt; 小方块在被拖拽着移动时，需要移动到的新位置。通过 Marble Diagram 来描述一下我们的原始流与想要得到的流，其中最下面这个流就是我们想要用于更新小方块位置的流。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;mousedown   : --d----------------------d---------
mousemove   : -m--m-m-m--m--m---m-m-------m-m-m--
mouseup     : ---------u---------------------u---

dragUpdate  : ----m-m-m-------------------m-m----&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;简而言之，就是在一次 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mousedown&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mouseup&lt;/code&gt; 之间触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mousemove&lt;/code&gt; 时，更新小方块的位置。要做到这一点，最重要的操作符是 &lt;a href=&quot;http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-takeUntil&quot;&gt;&lt;strong&gt;takeUntil&lt;/strong&gt;&lt;/a&gt;，相关的伪代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;mousedown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mousemove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;takeUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mouseup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;将 &lt;strong&gt;switchMap&lt;/strong&gt; 和 &lt;strong&gt;takeUntil&lt;/strong&gt; 加入上面的 Marble Diagram：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;mousedown  : --d----------------------d---------
mousemove  : -m--m-m-m--m--m---m-m-------m-m-m--
mouseup    : ---------u---------------------u---
     
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;   stream1$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; mousedown.map&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; mousemove.takeUntil&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mouseup&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;stream1$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;   &lt;/span&gt;: &lt;span class=&quot;nt&quot;&gt;--d----------------------d---------&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;                \                      \
                 m-m-m|                 -m-m|
   
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;   dragUpdate = stream1$&lt;/span&gt;.switch&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
dragUpdate : ----m-m-m-------------------m-m----&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其实 &lt;strong&gt;switchMap&lt;/strong&gt; 就是 &lt;strong&gt;map + switch&lt;/strong&gt; 组合的简写形式。当然，我们还需要同时记录一下初始位置并根据鼠标移动的距离来更新小方块的位置，实际的实现代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouseDown$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mousedown&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouseMove$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mousemove&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouseUp$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mouseup&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;mouseDown$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pos&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouseMove$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moveEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moveEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moveEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;takeUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mouseUp$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;getTranslate&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;setTranslate&lt;/code&gt; 主要作用就是获取和更新小方块的位置。具体实现可以参见 &lt;a href=&quot;https://codepen.io/jerryzou/pen/XgppaN&quot;&gt;Codepen&lt;/a&gt;&lt;/p&gt;

&lt;p data-height=&quot;260&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;XgppaN&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;jerryzou&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;easy-drag&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jerryzou/pen/XgppaN/&quot;&gt;easy-drag&lt;/a&gt; by Jerry Zou (&lt;a href=&quot;https://codepen.io/jerryzou&quot;&gt;@jerryzou&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;2-添加初始延迟&quot;&gt;2. 添加初始延迟&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;需求&lt;/strong&gt;：在拖拽的实际应用中，有时会希望有个初始延迟。就像手机屏幕上的诸多 App 图标，在你想要拖拽它们进行排序时，通常需要按住图标一小段时间，比如 &lt;strong&gt;200ms&lt;/strong&gt;（如下图所示），这时该如何操作呢？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://sinacloud.net/heaven-blog-files/images/posts/iPhone-drag.gif&quot; alt=&quot;iPhone drag&quot; /&gt;&lt;/p&gt;

&lt;p&gt;为了演示方便，这里我们先定义一个简单的动画，当用户鼠标按下超过一定时间后，播放一个闪烁动画：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-css&quot; data-lang=&quot;css&quot;&gt;&lt;span class=&quot;nc&quot;&gt;.blink&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;animation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0.4s&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;linear&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blinking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@keyframes&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blinking&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;此处我们只做一个简单的实现：在用户鼠标按下时间超过 200ms 且在这 200ms 的时间内没有发生鼠标移动时，认为拖拽开始。伪代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;mousedown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;takeUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mousemove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其中，上面的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$$&lt;/code&gt; 指的是一个新创建的流。为了得到更直观的理解，使用多个 Marble Diagram 来分段理解之前的伪代码：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;go&quot;&gt;mousedown   : --d----------------------d---------
mousemove   : -m---m----m--------m-------------m-

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;   stream1$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; mousedown.map&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;.delay&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;200&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.takeUntil&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mousemove&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;stream1$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;: &lt;span class=&quot;nt&quot;&gt;--d----------------------d---------&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;                 \                      \
                  -|                     ----s|

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;   dragStart = mousedown.switchMap(() =&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;.delay&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;200&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.takeUntil&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;mousemove&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
dragStart   : -------------------------------s----&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;在第一次鼠标按下的 200ms 内，触发了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mousemove&lt;/code&gt; 事件，所以第一次 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mousedown&lt;/code&gt; 并没有触发一次 &lt;strong&gt;dragStart&lt;/strong&gt;，而在第二次鼠标按下的 200ms 内，并没有触发 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mousemove&lt;/code&gt; 事件，所以最后就引起了一次 &lt;strong&gt;dragStart&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;结合之前的简单拖拽的实现，代码如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;mouseDown$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;delay&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;takeUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mouseMove$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pos&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;blink&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouseMove$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moveEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moveEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moveEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;takeUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mouseUp$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;classList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;blink&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;setTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其中，多了两句操作 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#box&lt;/code&gt; 的 classname 的代码，主要就是用于触发动画的。完整代码见 &lt;a href=&quot;https://codepen.io/jerryzou/pen/bRgOdN?editors=0110&quot;&gt;Codepen&lt;/a&gt;&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;bRgOdN&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;jerryzou&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;delay-drag&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jerryzou/pen/bRgOdN/&quot;&gt;delay-drag&lt;/a&gt; by Jerry Zou (&lt;a href=&quot;https://codepen.io/jerryzou&quot;&gt;@jerryzou&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;3-拖拽接龙&quot;&gt;3. 拖拽接龙&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;需求：给定 n 个小方块，要求拖拽第一个小方块进行移动，后续的小方块能够以间隔 0.1s 的时间跟着之前的小方块进行延迟模仿运动。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://sinacloud.net/heaven-blog-files/images/posts/drag-list.gif&quot; alt=&quot;drag list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此例中，我们不再要求“初始延迟”，因此针对正在拖拽着的红色小方块，只要沿用第一个例子中的简单拖拽的方法，即可获取我们需要改变方块位置的事件流：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;mousedown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mousemove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;takeUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mouseup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;然而我们该如何依次修改多个方块的位置呢？首先，可以先构造一个流来按延迟时间依次取得我们想要改变的小方块：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// 获取所有小方块，图示的例子中给出的是 7 个小方块&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boxes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// 使用 zip 操作符构造一个由 boxes 组成的流&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boxes$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boxes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delayBoxes$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boxes$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;假定 7 个 boxes 在 Marble Diagram 中分别表示为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;a&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;b&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;d&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;f&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;g&lt;/code&gt;：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;boxes$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;          &lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;abcdefg&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;|
&lt;span class=&quot;go&quot;&gt;interval(100)   : 0---0---1---2---3---4---5---6---7---8---

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;   delayBoxes$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; boxes&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;zip&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Rx.Observable.interval&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.startWith&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;box&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; box&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;delayBoxes$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;: a---b---c---d---e---f---g|&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;只要将原本用于修改方块位置的 mousemove 事件流 mergeMap 到上面例子中的 delayBoxes$ 上，即可完成“拖拽接龙”。伪代码如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;nx&quot;&gt;mousedown&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mousemove&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;takeUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mouseup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mergeMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delayBoxes$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* 此处更新各个小方块的位置 */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;让我们继续着眼于 Marble Diagram：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-console&quot; data-lang=&quot;console&quot;&gt;&lt;span class=&quot;gp&quot;&gt;delayBoxes$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;: &lt;span class=&quot;nt&quot;&gt;---a---b---c---d---e---f---g&lt;/span&gt;|
&lt;span class=&quot;gp&quot;&gt;dragUpdate$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;     &lt;/span&gt;: &lt;span class=&quot;nt&quot;&gt;-----m--------m----------m-------&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;   stream1$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; dragUpdate&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;map&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; delayBoxes&lt;span class=&quot;nv&quot;&gt;$)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;stream1$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;        &lt;/span&gt;: &lt;span class=&quot;nt&quot;&gt;-----m-------m----------m-------&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;                        \       \          \
                         \       \          a---b---c---d---e---f---g|
                          \       a---b---c---d---e---f---g|
                           a---b---c---d---e---f---g|

&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;   result$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; dragUpdate&lt;span class=&quot;nv&quot;&gt;$.&lt;/span&gt;mergeMap&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; delayBoxes&lt;span class=&quot;nv&quot;&gt;$)&lt;/span&gt;
&lt;span class=&quot;go&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;result$&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;         &lt;/span&gt;: &lt;span class=&quot;nt&quot;&gt;---------a---b--ac--bd--cea-dfb-egc-f-d-g-e---f---g&lt;/span&gt;|&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;正如上面 Marble Diagram 所示，我们可以借助流的力量从容地在合适的时机修改对应的小方块的位置。具体的实现代码如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;headBox&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;boxes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouseDown$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mousedown&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouseMove$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mousemove&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouseUp$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;fromEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;mouseup&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delayBoxes$&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([].&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;boxes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;zip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Rx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Observable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;mouseDown$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;headBox&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;switchMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialPos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pos&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientY&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;event&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mouseMove$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;moveEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moveEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;moveEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;clientY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;clientY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;initialPos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;takeUntil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mouseUp$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mergeMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;delayBoxes$&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTranslate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;subscribe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;完整的实现代码见 &lt;a href=&quot;https://codepen.io/jerryzou/pen/MoJpam?editors=0110&quot;&gt;Codepen&lt;/a&gt;&lt;/p&gt;

&lt;p data-height=&quot;265&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;MoJpam&quot; data-default-tab=&quot;js,result&quot; data-user=&quot;jerryzou&quot; data-embed-version=&quot;2&quot; data-pen-title=&quot;drag-list&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;https://codepen.io/jerryzou/pen/MoJpam/&quot;&gt;drag-list&lt;/a&gt; by Jerry Zou (&lt;a href=&quot;https://codepen.io/jerryzou&quot;&gt;@jerryzou&lt;/a&gt;) on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;小结&quot;&gt;小结&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;这篇文章介绍了关于拖拽的三个实际场景：
    &lt;ul&gt;
      &lt;li&gt;在简单拖拽的实例中，使用到了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;takeUntil&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switchMap&lt;/code&gt; 操作符；&lt;/li&gt;
      &lt;li&gt;需要添加初始延迟时，我们额外使用到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delay&lt;/code&gt; 操作符；&lt;/li&gt;
      &lt;li&gt;在最后的拖拽接龙实例中，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mergeMap&lt;/code&gt; 操作符和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zip + interval&lt;/code&gt; 的组合发挥了很大的作用&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;相信看完本文以后，你们能够深刻体会到：结合 &lt;strong&gt;Marble Diagram&lt;/strong&gt; 来理解 RxJS 的流是一个非常棒的方法！&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后大家可以思考一下：在第三个例子中，如果把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mergeMap&lt;/code&gt; 改为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;switchMap&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;concatMap&lt;/code&gt; 会发生什么？这是课后作业。哈哈！&lt;/p&gt;

</description>
        <pubDate>Tue, 20 Jun 2017 14:55:00 +0000</pubDate>
        <link>https://jerryzou.com/posts/rxjs-practice-01/</link>
        <guid isPermaLink="true">https://jerryzou.com/posts/rxjs-practice-01/</guid>
      </item>
    
      <item>
        <title>Visual Studio Code 前端调试不完全指南</title>
        <description>&lt;p&gt;&lt;strong&gt;Visual Studio Code&lt;/strong&gt; (以下简称 vscode) 如今已经代替 Sublime，成为前端工程师们最喜爱的代码编辑器。它作为一个大型的开源项目，不断推陈出新；社区中涌现出大量优质的插件，以支持我们更加舒服地进行开发工作。在近期的工作中，我尝试通过 vscode 来提升调试代码的幸福度，积累了一点点小心得在此与大家分享一下。&lt;/p&gt;

&lt;p&gt;接下来的内容将从以下几方面进行展开：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;launch / attach&lt;/li&gt;
  &lt;li&gt;调试前端代码&lt;/li&gt;
  &lt;li&gt;调试通过 Nodemon 启动的 Node 服务器&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-launch--attach&quot;&gt;1. launch / attach&lt;/h2&gt;

&lt;p&gt;要使用 vscode 的调试功能，首先就得配置 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vscode/launch.json&lt;/code&gt; 文件。以最简单的 Node 调试配置为例：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceRoot}/index.js&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;attach&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Attach&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5858&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其中最重要的参数是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;request&lt;/code&gt; ，它的取值有两种 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launch&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attach&lt;/code&gt;。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;launch&lt;/strong&gt;模式：&lt;strong&gt;由 vscode 来启动&lt;/strong&gt;一个独立的具有 debug 模式的程序&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;attach&lt;/strong&gt;模式：附加于（也可以说“监听”）一个&lt;strong&gt;已经启动的程序&lt;/strong&gt;（必须已经开启 Debug 模式）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这两种截然不同的模式到底有什么具体的应用场景呢？且看后文。&lt;/p&gt;

&lt;h2 id=&quot;2-调试前端代码&quot;&gt;2. 调试前端代码&lt;/h2&gt;

&lt;p&gt;通过 vscode 调试前端代码主要依赖于一个插件：&lt;a href=&quot;https://github.com/Microsoft/vscode-chrome-debug&quot;&gt;Debugger for Chrome&lt;/a&gt;，该插件主要利用 &lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome 所开放出来的接口&lt;/a&gt; 来实现对其渲染的页面进行调试。可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Shift + Cmd + X&lt;/code&gt; 打开插件中心，搜索对应插件后直接安装。安装完成并重新加载 vscode 后，可以直接点击调试按钮并创建新的启动配置。如果你之前已经创建过启动配置了，就可以直接打开 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.vscode/launch.json&lt;/code&gt; 进行修改。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sinacloud.net/heaven-blog-files/images/posts/vscode-debug-chrome.png&quot; alt=&quot;vscode-debug-chrome&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中调试 Chrome 页面的配置如下所示：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;chrome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;launch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;启动一个独立的 Chrome 以调试 frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:8091/frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;webRoot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceRoot}/frontend&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;如之前所述，通过第一个 launch 配置就能启动一个通过 vscode 调试的 Chrome。大家可以直接使用我组织好的项目 &lt;a href=&quot;https://github.com/zry656565/vscode-debug-sample&quot;&gt;zry656565/vscode-debug-sample&lt;/a&gt; 进行测试，测试方法在该项目的 README 里面写得很清楚了。简要步骤概括为：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm run frontend&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;启动调试配置：“启动一个独立的 Chrome 以调试 frontend”&lt;/li&gt;
  &lt;li&gt;在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;frontend/index.js&lt;/code&gt; 中加断点&lt;/li&gt;
  &lt;li&gt;访问 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://localhost:8091/frontend/&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;延伸问题&quot;&gt;延伸问题&lt;/h3&gt;

&lt;p&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;launch&lt;/code&gt; 模式调试前端代码存在一个问题，就是 vscode 会以新访客的身份打开一个新的 Chrome 进程，也就是说你&lt;strong&gt;之前在 Chrome 上装的插件都没法在这个页面上生效&lt;/strong&gt;（如下图所示）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://sinacloud.net/heaven-blog-files/images/posts/vscode-debug-launch.png&quot; alt=&quot;vscode-debug-launch&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在这种情况下 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;attach&lt;/code&gt; 模式就有它存在的意义了：对一个已经启动的 Chrome 进行监听调试。&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;chrome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;attach&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;监听一个已经启动调试模式的 Chrome&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:8091/frontend&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;webRoot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;${workspaceRoot}/frontend&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;其中 9222 是 Chrome 的调试模式推荐的端口，可以根据需要进行修改。不过目前我并没有成功实施这个设想，对此有兴趣的同学可以从下面这两个链接入手去研究一下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevTools Protocol Viewer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/vscode-chrome-debug/blob/master/README.md#attach&quot;&gt;Debugger for Chrome / Attach&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;有一部分遇到的问题可以直接在 Debugger for Chrome 的 FAQ 中得到解答。&lt;/p&gt;

&lt;h2 id=&quot;3-调试通过-nodemon-启动的-node-服务器&quot;&gt;3. 调试通过 Nodemon 启动的 Node 服务器&lt;/h2&gt;

&lt;p&gt;如今，使用 Node 服务器开发一些中间层的服务也慢慢纳入了所谓“大前端”的范畴。而在开发 Node 服务时，我们通常要借助类似于 &lt;a href=&quot;https://github.com/remy/nodemon&quot;&gt;nodemon&lt;/a&gt; 这样的工具来避免频繁手动重启服务器。在这种情况下，我们又如何利用 vscode 来进行断点调试呢？先来看看示例配置文件：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0.2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;configurations&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;attach&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;附加于已启动的 Node 服务器（debug模式）&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5858&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;restart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;request&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;attach&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;附加于已启动的 Node 服务器（inspect模式）&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9229&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;restart&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;首先，为了配合 nodemon 在监听到文件修改时重启服务器，此处需要添加一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;restart&lt;/code&gt; 参数。同时大家可能注意到了，这里给出了两种模式，大家可能根据以下区别来选择合适自己的协议：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Runtime&lt;/th&gt;
      &lt;th&gt;‘Legacy Protocol’&lt;/th&gt;
      &lt;th&gt;‘Inspector Protocol’&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;io.js&lt;/td&gt;
      &lt;td&gt;all&lt;/td&gt;
      &lt;td&gt;no&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;node.js&lt;/td&gt;
      &lt;td&gt;&amp;lt; 8.x&lt;/td&gt;
      &lt;td&gt;&amp;gt;= 6.3 (Windows: &amp;gt;= 6.9)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Electron&lt;/td&gt;
      &lt;td&gt;all&lt;/td&gt;
      &lt;td&gt;not yet&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Chakra&lt;/td&gt;
      &lt;td&gt;all&lt;/td&gt;
      &lt;td&gt;not yet&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;通俗来说，旧版 Node (&amp;lt; 6.3) 推荐使用 Legacy Protocol (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--debug&lt;/code&gt;模式，默认 5858 端口)，而新版的 Node (&amp;gt;= 6.3) 推荐使用 Inspector Protocol (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--inspect&lt;/code&gt;模式，默认 9229 端口)。&lt;/p&gt;

&lt;p&gt;需要注意的是，在启动 nodemon 程序时，也要添加对应的参数，比如：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell-session&quot; data-lang=&quot;shell-session&quot;&gt;&lt;span class=&quot;go&quot;&gt;nodemon --debug server/app.js
nodemon --inspect server/app.js&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;详细的例子同样可以在 &lt;a href=&quot;https://github.com/zry656565/vscode-debug-sample&quot;&gt;zry656565/vscode-debug-sample&lt;/a&gt; 中找到。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/Microsoft/vscode-chrome-debug/blob/master/README.md&quot;&gt;VS Code - Debugger for Chrome - README&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/docs/editor/debugging&quot;&gt;Debugging in VS Code&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://chromedevtools.github.io/devtools-protocol/&quot;&gt;Chrome DevTools Protocol Viewer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/bdspen/nodemon_vscode&quot;&gt;bdspen/nodemon_vscode&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://code.visualstudio.com/docs/nodejs/nodejs-debugging&quot;&gt;Node.js Debugging in VS Code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sat, 20 May 2017 11:50:00 +0000</pubDate>
        <link>https://jerryzou.com/posts/vscode-debug-guide/</link>
        <guid isPermaLink="true">https://jerryzou.com/posts/vscode-debug-guide/</guid>
      </item>
    
  </channel>
</rss>
